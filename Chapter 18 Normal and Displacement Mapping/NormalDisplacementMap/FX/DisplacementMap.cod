//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
    float   gHeightScale;               // Offset:  240, size:    4
    float   gMaxTessDistance;           // Offset:  244, size:    4
    float   gMinTessDistance;           // Offset:  248, size:    4
    float   gMinTessFactor;             // Offset:  252, size:    4
    float   gMaxTessFactor;             // Offset:  256, size:    4
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gViewProj;                 // Offset:  128, size:   64
    float4x4 gWorldViewProj;            // Offset:  192, size:   64
    float4x4 gTexTransform;             // Offset:  256, size:   64
    Material gMaterial;                 // Offset:  320, size:   64
}

//
// 4 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap;
TextureCube gCubeMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 44 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r4.xyz, r3.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r4.xyz, r7.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 88
                mul r1.xyz, r8.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 89
                movc r4.xyz, r1.wwww, r4.xyzx, r13.xyzx
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r4.xyz, r4.xyzx  // r4.x <- D.x; r4.y <- D.y; r4.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 252
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 93 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r4.xyz, r3.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r4.xyz, r7.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 88
                mul r1.xyz, r8.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 89
                movc r4.xyz, r1.wwww, r4.xyzx, r13.xyzx
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r4.xyz, r4.xyzx  // r4.x <- D.x; r4.y <- D.y; r4.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 252
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 130 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r4.xyz, r3.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r4.xyz, r7.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 88
                mul r1.xyz, r8.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 89
                movc r4.xyz, r1.wwww, r4.xyzx, r13.xyzx
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r4.xyz, r4.xyzx  // r4.x <- D.x; r4.y <- D.y; r4.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 252
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 167 instruction slots used
                            
            };
        }

    }

    technique11 Light0Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[22], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 212 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 228
                nop 
                
                #line 234
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r0.w, cb0[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light1Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r4.xyz, r3.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r4.xyz, r7.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 88
                mul r1.xyz, r8.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 89
                movc r4.xyz, r1.wwww, r4.xyzx, r13.xyzx
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r4.xyz, r4.xyzx  // r4.x <- D.x; r4.y <- D.y; r4.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 252
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 93 instruction slots used
                            
            };
        }

    }

    technique11 Light2Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r4.xyz, r3.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r4.xyz, r7.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 88
                mul r1.xyz, r8.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 89
                movc r4.xyz, r1.wwww, r4.xyzx, r13.xyzx
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r4.xyz, r4.xyzx  // r4.x <- D.x; r4.y <- D.y; r4.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 252
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 130 instruction slots used
                            
            };
        }

    }

    technique11 Light3Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r4.xyz, r3.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r4.xyz, r7.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 88
                mul r1.xyz, r8.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 89
                movc r4.xyz, r1.wwww, r4.xyzx, r13.xyzx
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r4.xyz, r4.xyzx  // r4.x <- D.x; r4.y <- D.y; r4.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 252
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 167 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[22], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 212 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 219
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 228
                nop 
                
                #line 234
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r0.w, cb0[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 12 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r4.xyz, r3.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r4.xyz, r7.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 88
                mul r1.xyz, r8.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 89
                movc r4.xyz, r1.wwww, r4.xyzx, r13.xyzx
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r4.xyz, r4.xyzx  // r4.x <- D.x; r4.y <- D.y; r4.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 252
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 98 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r4.xyz, r3.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r4.xyz, r7.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 88
                mul r1.xyz, r8.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 89
                movc r4.xyz, r1.wwww, r4.xyzx, r13.xyzx
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r4.xyz, r4.xyzx  // r4.x <- D.x; r4.y <- D.y; r4.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 252
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 135 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r4.xyz, r3.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r4.xyz, r7.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 88
                mul r1.xyz, r8.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 89
                movc r4.xyz, r1.wwww, r4.xyzx, r13.xyzx
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r4.xyz, r4.xyzx  // r4.x <- D.x; r4.y <- D.y; r4.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 252
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 172 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r4.xyz, r4.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r1.yzw, r7.xxyz, r1.wwww
                mul r1.yzw, r10.xxyz, r1.yyzw  // r1.y <- diffuse.x; r1.z <- diffuse.y; r1.w <- diffuse.z
                
                #line 88
                mul r4.xyz, r8.xyzx, r1.xxxx
                mul r4.xyz, r11.xyzx, r4.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 89
                movc r1.xyz, r3.wwww, r1.yzwy, r13.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r4.xyz, r3.wwww, r4.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r4.xyz, r4.xyzx  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 252
                add r3.xyz, r4.xyzx, r5.xyzx  // r3.x <- spec.x; r3.y <- spec.y; r3.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 102 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r4.xyz, r4.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r1.yzw, r7.xxyz, r1.wwww
                mul r1.yzw, r10.xxyz, r1.yyzw  // r1.y <- diffuse.x; r1.z <- diffuse.y; r1.w <- diffuse.z
                
                #line 88
                mul r4.xyz, r8.xyzx, r1.xxxx
                mul r4.xyz, r11.xyzx, r4.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 89
                movc r1.xyz, r3.wwww, r1.yzwy, r13.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r4.xyz, r3.wwww, r4.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r4.xyz, r4.xyzx  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 252
                add r3.xyz, r4.xyzx, r5.xyzx  // r3.x <- spec.x; r3.y <- spec.y; r3.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 139 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r4.xyz, r4.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r1.yzw, r7.xxyz, r1.wwww
                mul r1.yzw, r10.xxyz, r1.yyzw  // r1.y <- diffuse.x; r1.z <- diffuse.y; r1.w <- diffuse.z
                
                #line 88
                mul r4.xyz, r8.xyzx, r1.xxxx
                mul r4.xyz, r11.xyzx, r4.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 89
                movc r1.xyz, r3.wwww, r1.yzwy, r13.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r4.xyz, r3.wwww, r4.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r4.xyz, r4.xyzx  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 252
                add r3.xyz, r4.xyzx, r5.xyzx  // r3.x <- spec.x; r3.y <- spec.y; r3.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 176 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[22], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 199 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 202
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                
                #line 228
                nop 
                
                #line 234
                mov r1.xyz, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 273
                mov r0.y, -cb0[12].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- fogLerp
                
                #line 276
                mov r0.yzw, -r1.xxyz
                add r0.yzw, r0.yyzw, cb0[14].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r1.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 20 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r4.xyz, r4.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r1.yzw, r7.xxyz, r1.wwww
                mul r1.yzw, r10.xxyz, r1.yyzw  // r1.y <- diffuse.x; r1.z <- diffuse.y; r1.w <- diffuse.z
                
                #line 88
                mul r4.xyz, r8.xyzx, r1.xxxx
                mul r4.xyz, r11.xyzx, r4.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 89
                movc r1.xyz, r3.wwww, r1.yzwy, r13.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r4.xyz, r3.wwww, r4.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r4.xyz, r4.xyzx  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 252
                add r3.xyz, r4.xyzx, r5.xyzx  // r3.x <- spec.x; r3.y <- spec.y; r3.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 102 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r4.xyz, r4.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r1.yzw, r7.xxyz, r1.wwww
                mul r1.yzw, r10.xxyz, r1.yyzw  // r1.y <- diffuse.x; r1.z <- diffuse.y; r1.w <- diffuse.z
                
                #line 88
                mul r4.xyz, r8.xyzx, r1.xxxx
                mul r4.xyz, r11.xyzx, r4.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 89
                movc r1.xyz, r3.wwww, r1.yzwy, r13.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r4.xyz, r3.wwww, r4.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r4.xyz, r4.xyzx  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 252
                add r3.xyz, r4.xyzx, r5.xyzx  // r3.x <- spec.x; r3.y <- spec.y; r3.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 139 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r4.xyz, r4.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r1.yzw, r7.xxyz, r1.wwww
                mul r1.yzw, r10.xxyz, r1.yyzw  // r1.y <- diffuse.x; r1.z <- diffuse.y; r1.w <- diffuse.z
                
                #line 88
                mul r4.xyz, r8.xyzx, r1.xxxx
                mul r4.xyz, r11.xyzx, r4.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 89
                movc r1.xyz, r3.wwww, r1.yzwy, r13.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r4.xyz, r3.wwww, r4.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r4.xyz, r4.xyzx  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 252
                add r3.xyz, r4.xyzx, r5.xyzx  // r3.x <- spec.x; r3.y <- spec.y; r3.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 176 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[22], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 199 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 202
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                
                #line 219
                mov r0.y, l(-0.100000)
                add r0.y, r0.y, r1.w
                lt r0.y, r0.y, l(0.000000)
                and r0.y, r0.y, l(-1)
                discard_nz r0.y
                
                #line 228
                nop 
                
                #line 234
                mov r1.xyz, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 273
                mov r0.y, -cb0[12].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- fogLerp
                
                #line 276
                mov r0.yzw, -r1.xxyz
                add r0.yzw, r0.yyzw, cb0[14].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r1.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r4.xyz, r4.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r1.yzw, r7.xxyz, r1.wwww
                mul r1.yzw, r10.xxyz, r1.yyzw  // r1.y <- diffuse.x; r1.z <- diffuse.y; r1.w <- diffuse.z
                
                #line 88
                mul r4.xyz, r8.xyzx, r1.xxxx
                mul r4.xyz, r11.xyzx, r4.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 89
                movc r1.xyz, r3.wwww, r1.yzwy, r13.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r4.xyz, r3.wwww, r4.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r4.xyz, r4.xyzx  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 252
                add r3.xyz, r4.xyzx, r5.xyzx  // r3.x <- spec.x; r3.y <- spec.y; r3.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 107 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r4.xyz, r4.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r1.yzw, r7.xxyz, r1.wwww
                mul r1.yzw, r10.xxyz, r1.yyzw  // r1.y <- diffuse.x; r1.z <- diffuse.y; r1.w <- diffuse.z
                
                #line 88
                mul r4.xyz, r8.xyzx, r1.xxxx
                mul r4.xyz, r11.xyzx, r4.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 89
                movc r1.xyz, r3.wwww, r1.yzwy, r13.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r4.xyz, r3.wwww, r4.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r4.xyz, r4.xyzx  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 252
                add r3.xyz, r4.xyzx, r5.xyzx  // r3.x <- spec.x; r3.y <- spec.y; r3.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 144 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r4.xyz, r4.wwww, r4.xyzx
                add r4.xyz, r9.xyzx, r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                
                #line 85
                dp3 r1.x, r4.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r8.w
                exp r1.x, r1.x  // r1.x <- specFactor
                
                #line 87
                mul r1.yzw, r7.xxyz, r1.wwww
                mul r1.yzw, r10.xxyz, r1.yyzw  // r1.y <- diffuse.x; r1.z <- diffuse.y; r1.w <- diffuse.z
                
                #line 88
                mul r4.xyz, r8.xyzx, r1.xxxx
                mul r4.xyz, r11.xyzx, r4.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 89
                movc r1.xyz, r3.wwww, r1.yzwy, r13.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                movc r4.xyz, r3.wwww, r4.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r4.xyz, r4.xyzx  // r4.x <- S.x; r4.y <- S.y; r4.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 252
                add r3.xyz, r4.xyzx, r5.xyzx  // r3.x <- spec.x; r3.y <- spec.y; r3.z <- spec.z
                
                #line 255
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 181 instruction slots used
                            
            };
        }

    }

    technique11 Light1Reflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // gCubeMap                          texture  float4        cube             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r0.w, r1.xyzx, r4.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r2.xyz, r0.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t1.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 103 instruction slots used
                            
            };
        }

    }

    technique11 Light2Reflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // gCubeMap                          texture  float4        cube             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r0.w, r1.xyzx, r4.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r2.xyz, r0.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t1.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 140 instruction slots used
                            
            };
        }

    }

    technique11 Light3Reflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // gCubeMap                          texture  float4        cube             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r0.w, r1.xyzx, r4.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r2.xyz, r0.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t1.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 177 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[22], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 212 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 228
                nop 
                
                #line 234
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r0.w, cb0[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r0.w, r1.xyzx, r4.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r2.xyz, r0.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 103 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r0.w, r1.xyzx, r4.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r2.xyz, r0.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 140 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r0.w, r1.xyzx, r4.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r2.xyz, r0.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 177 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[22], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 212 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 219
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 228
                nop 
                
                #line 234
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r0.w, cb0[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 12 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r0.w, r1.xyzx, r4.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r2.xyz, r0.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 108 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r0.w, r1.xyzx, r4.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r2.xyz, r0.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 145 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r0.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r0.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r4.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r3.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r0.w, r1.xyzx, r4.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r2.xyz, r0.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 182 instruction slots used
                            
            };
        }

    }

    technique11 Light1FogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // gCubeMap                          texture  float4        cube             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r1.w, r1.xyzx, r4.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t1.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 112 instruction slots used
                            
            };
        }

    }

    technique11 Light2FogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // gCubeMap                          texture  float4        cube             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r1.w, r1.xyzx, r4.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t1.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 149 instruction slots used
                            
            };
        }

    }

    technique11 Light3FogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // gCubeMap                          texture  float4        cube             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 208
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r1.w, r1.xyzx, r4.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t1.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 186 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[22], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 199 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 202
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                
                #line 228
                nop 
                
                #line 234
                mov r1.xyz, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 273
                mov r0.y, -cb0[12].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- fogLerp
                
                #line 276
                mov r0.yzw, -r1.xxyz
                add r0.yzw, r0.yyzw, cb0[14].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r1.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 20 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r1.w, r1.xyzx, r4.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 112 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r1.w, r1.xyzx, r4.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 149 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r1.w, r1.xyzx, r4.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 186 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[22], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 199 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 202
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                
                #line 219
                mov r0.y, l(-0.100000)
                add r0.y, r0.y, r1.w
                lt r0.y, r0.y, l(0.000000)
                and r0.y, r0.y, l(-1)
                discard_nz r0.y
                
                #line 228
                nop 
                
                #line 234
                mov r1.xyz, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 273
                mov r0.y, -cb0[12].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- fogLerp
                
                #line 276
                mov r0.yzw, -r1.xxyz
                add r0.yzw, r0.yyzw, cb0[14].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 280
                mul r0.w, r1.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r1.w, r1.xyzx, r4.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 117 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r1.w, r1.xyzx, r4.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 154 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4
                //   float gMinTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessFactor;              // Offset:  252 Size:     4
                //   float gMaxTessFactor;              // Offset:  256 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[17], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.TessFactor; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 67 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 68
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 69
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 72
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                
                #line 74
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 80
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].z
                mov r1.w, -cb0[15].y
                add r1.w, r1.w, cb0[15].z
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 83
                mov r1.w, -cb0[15].w
                add r1.w, r1.w, cb0[16].x
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[15].w  // r0.w <- vout.TessFactor
                
                #line 85
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                mov o3.z, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TESS                     0     z         3     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].TessFactor
                //
                #line 132 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 133
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 134
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                
                #line 135
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                
                #line 137
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r3.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 104
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 105
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 106
                add r0.z, vicp[1][3].z, vicp[0][3].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 107
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 109
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 22 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale;                // Offset:  240 Size:     4
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y
                //
                #line 159 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 160
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 161
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                
                #line 162
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                
                #line 165
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 173
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 174
                mov r4.xyz, -cb0[12].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                sqrt r1.w, r1.w
                mov r2.w, -r0.w
                add r1.w, r1.w, r2.w
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 177
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 180
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[15].x
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx
                
                #line 183
                mov r0.w, l(1.000000)
                dp4 r4.x, r0.xyzw, cb1[8].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r0.xyzw, cb1[9].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.z, r0.xyzw, cb1[10].xyzw  // r4.z <- dout.PosH.z
                dp4 r4.w, r0.xyzw, cb1[11].xyzw  // r4.w <- dout.PosH.w
                
                #line 185
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 51 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale;                // Offset:  240 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  244 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  252 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  256 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float4 Reflect;                // Offset:  368
                //
                //   } gMaterial;                       // Offset:  320 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_constantbuffer CB1[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 196 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 199
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 202
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 205
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 212
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 219
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 227
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 228
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 210
                dp3 r1.w, r4.zxyz, r0.xyzx
                mul r5.xyz, r0.yzxy, r1.wwww
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                
                #line 211
                mul r5.xyz, r0.yzxy, r4.yzxy
                mul r6.xyz, r0.zxyz, r4.xyzx
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z
                
                #line 213
                mov r6.x, r4.z  // r6.x <- TBN._m00
                mov r6.y, r5.x  // r6.y <- TBN._m10
                mov r6.z, r0.x  // r6.z <- TBN._m20
                mov r7.x, r4.x  // r7.x <- TBN._m01
                mov r7.y, r5.y  // r7.y <- TBN._m11
                mov r7.z, r0.y  // r7.z <- TBN._m21
                mov r0.x, r4.y  // r0.x <- TBN._m02
                mov r0.y, r5.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r6.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r7.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r0.xyzx  // r4.z <- bumpedNormalW.z
                
                #line 218
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 228 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW.x; r4.y <- bumpedNormalW.y; r4.z <- bumpedNormalW.z
                
                #line 238
                mov r0.xyz, l(0,0,0,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z
                
                #line 239
                mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                
                #line 240
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx
                mov r7.xyz, cb1[21].xyzx
                mov r8.xyzw, cb1[22].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 247
                nop 
                mov r6.xyz, cb1[20].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[21].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[22].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 67
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r4.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                
                #line 84
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r4.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r4.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 85
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 87
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 88
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 89
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 247 "D:\d3d11book\Chapter 18 Normal and Displacement Mapping\NormalDisplacementMap\FX\DisplacementMap.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 250
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 251
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 252
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 255
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r5.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 259
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 260
                dp3 r1.w, r1.xyzx, r4.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 261
                sample_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t2.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z
                
                #line 263
                mul r1.xyz, r1.xyzx, cb1[23].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 273
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 276
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 280
                mul r0.w, r2.w, cb1[21].w  // r0.w <- litColor.w
                
                #line 282
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 191 instruction slots used
                            
            };
        }

    }

}

